[{"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\index.tsx":"1","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\App.tsx":"2","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\utils\\axios.js":"3","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\hooks\\useAsync.ts":"4","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\utils\\renderSwitch.tsx":"5","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Dashboard.tsx":"6","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Register.tsx":"7","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Movie.tsx":"8","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Login.tsx":"9","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Screenings.tsx":"10","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Movies.tsx":"11","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\components\\index.ts":"12","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\components\\navbar\\Navbar.tsx":"13","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\components\\navbar\\styles\\Navbar.tsx":"14","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Navbar.tsx":"15","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\globalStyles.ts":"16","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\constants\\colors.ts":"17","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\constants\\routes.ts":"18","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\constants\\breakpoints.ts":"19"},{"size":410,"mtime":1608420623866,"results":"20","hashOfConfig":"21"},{"size":2998,"mtime":1608420627332,"results":"22","hashOfConfig":"21"},{"size":133,"mtime":1608388994237,"results":"23","hashOfConfig":"21"},{"size":876,"mtime":1608378071244,"results":"24","hashOfConfig":"21"},{"size":360,"mtime":1608390059768,"results":"25","hashOfConfig":"21"},{"size":1266,"mtime":1608416230499,"results":"26","hashOfConfig":"21"},{"size":2769,"mtime":1608416230801,"results":"27","hashOfConfig":"21"},{"size":1789,"mtime":1608426407685,"results":"28","hashOfConfig":"21"},{"size":1796,"mtime":1608418475601,"results":"29","hashOfConfig":"21"},{"size":2229,"mtime":1608416239166,"results":"30","hashOfConfig":"21"},{"size":2020,"mtime":1608416230713,"results":"31","hashOfConfig":"21"},{"size":68,"mtime":1608479863958,"results":"32","hashOfConfig":"21"},{"size":541,"mtime":1608480110958,"results":"33","hashOfConfig":"21"},{"size":2945,"mtime":1608481243061,"results":"34","hashOfConfig":"21"},{"size":1458,"mtime":1608480185391,"results":"35","hashOfConfig":"21"},{"size":485,"mtime":1608463765624,"results":"36","hashOfConfig":"21"},{"size":125,"mtime":1608424241314,"results":"37","hashOfConfig":"21"},{"size":172,"mtime":1608455033313,"results":"38","hashOfConfig":"21"},{"size":145,"mtime":1608481102075,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wgqdgd",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\index.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\App.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\utils\\axios.js",[],["84","85"],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\hooks\\useAsync.ts",["86"],"import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useAsync = <T, E = string>(\r\n  asyncFunction: () => Promise<T>,\r\n  immediate = true\r\n) => {\r\n  const [status, setStatus] = useState<\r\n    'idle' | 'pending' | 'success' | 'error'\r\n  >('idle');\r\n  const [value, setValue] = useState<T | null>(null);\r\n  const [error, setError] = useState<E | null>(null);\r\n\r\n  const execute = useCallback(() => {\r\n    setStatus('pending');\r\n    setValue(null);\r\n    setError(null);\r\n\r\n    return asyncFunction()\r\n      .then((response: any) => {\r\n        setValue(response);\r\n        setStatus('success');\r\n      })\r\n      .catch((error: any) => {\r\n        setError(error);\r\n        setStatus('error');\r\n      });\r\n  }, [asyncFunction]);\r\n\r\n  useEffect(() => {\r\n    if (immediate) {\r\n      execute();\r\n    }\r\n  }, []);\r\n\r\n  return { execute, status, value, error };\r\n};\r\n",["87","88"],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\utils\\renderSwitch.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Dashboard.tsx",["89","90","91","92","93"],"import React, { useState, useEffect } from 'react';\r\nimport axios from '../utils/axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAsync } from '../hooks/useAsync';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ntoast.configure();\r\n\r\ninterface Props {\r\n  setAuth: (boolean: Boolean) => void;\r\n}\r\n\r\nconst Dashboard: React.FC<Props> = ({ setAuth }) => {\r\n  const logout = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    localStorage.removeItem('token');\r\n    setAuth(false);\r\n    toast.success(\"You've been logged out!\", { autoClose: 2000 });\r\n  };\r\n\r\n  const getName = (): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get('/dashboard', {\r\n          headers: {\r\n            token: localStorage.token,\r\n          },\r\n        })\r\n        .then((res) => resolve(res.data.user_name))\r\n        .catch((err) => reject(err));\r\n    });\r\n  };\r\n\r\n  const { execute, status, value, error } = useAsync<string>(getName, true);\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello, {value}!</h1>\r\n      <button onClick={(e) => logout(e)}>Log out</button>\r\n      <Link to=\"/movies\">Search movies</Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Register.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Movie.tsx",["94"],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Login.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Screenings.tsx",["95"],"import React from 'react';\r\nimport { useAsync } from '../hooks/useAsync';\r\nimport axios from '../utils/axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  setAuth: (boolean: Boolean) => void;\r\n}\r\n\r\ninterface ScreeningPreview {\r\n  id_movie: number; // to be able to redirect to movie's description\r\n  id_screening: number;\r\n  movie_title: string;\r\n  movie_duration: string;\r\n  movie_img: string;\r\n  screening_price: number;\r\n  screening_date: string;\r\n  screening_hour: string;\r\n}\r\n\r\ninterface ScreeningPreviews extends Array<ScreeningPreview> {}\r\n\r\nconst Screenings: React.FC<Props> = ({ setAuth }) => {\r\n  const getScreenings = (): Promise<ScreeningPreviews> => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get('/screenings', {\r\n          headers: {\r\n            token: localStorage.token,\r\n          },\r\n        })\r\n        .then((res) => resolve(res.data))\r\n        .catch((err) => reject(err));\r\n    });\r\n  };\r\n\r\n  const { execute, status, value, error } = useAsync<ScreeningPreviews>(\r\n    getScreenings\r\n  );\r\n\r\n  const parseDate = (date: string) => {\r\n    const parsedDate = new Date(date);\r\n    return `${parsedDate.getDate()}.${parsedDate.getMonth()}`;\r\n  };\r\n\r\n  const renderSwitch = (param: string) => {\r\n    switch (param) {\r\n      case 'idle' || 'pending':\r\n        return <p>Loading post...</p>;\r\n      case 'error':\r\n        return <h1> {error} </h1>;\r\n      case 'success':\r\n        return (\r\n          <>\r\n            <h1>Screenings</h1>\r\n            {/*@ts-ignore*/}\r\n            {value.map((screening) => (\r\n              <div key={screening.id_screening}>\r\n                <p>{screening.movie_title}</p>\r\n                <img\r\n                  width=\"200px\"\r\n                  height=\"300px\"\r\n                  src={screening.movie_img}\r\n                  alt=\"movie-poster\"\r\n                />\r\n                <p>\r\n                  {parseDate(screening.screening_date)}{' '}\r\n                  {screening.screening_hour}\r\n                </p>\r\n              </div>\r\n            ))}\r\n\r\n            <Link to=\"/dashboard\">Back to dashboard</Link>\r\n          </>\r\n        );\r\n    }\r\n  };\r\n  return <>{renderSwitch(status)}</>;\r\n};\r\nexport default Screenings;\r\n","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Movies.tsx",["96","97","98"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useAsync } from '../hooks/useAsync';\r\nimport axios from '../utils/axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n  setAuth: (boolean: Boolean) => void;\r\n}\r\n\r\ninterface MoviePreview {\r\n  id_movie: number;\r\n  movie_title: string;\r\n  movie_release: string;\r\n  movie_duration: string;\r\n  movie_img: string;\r\n}\r\n\r\ninterface MoviePreviews extends Array<MoviePreview> {}\r\n\r\nconst Movies: React.FC<Props> = ({ setAuth }) => {\r\n  const history = useHistory();\r\n\r\n  const postSelectedHandler = (id: number) => {\r\n    history.push('/movies/' + id);\r\n  };\r\n\r\n  const getMovies = (): Promise<MoviePreviews> => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get('/movies', {\r\n          headers: {\r\n            token: localStorage.token,\r\n          },\r\n        })\r\n        .then((res) => resolve(res.data))\r\n        .catch((err) => reject(err));\r\n    });\r\n  };\r\n\r\n  const { execute, status, value, error } = useAsync<MoviePreviews>(getMovies);\r\n\r\n  const renderSwitch = (param: string) => {\r\n    switch (param) {\r\n      case 'idle' || 'pending':\r\n        return <p>Loading post...</p>;\r\n      case 'error':\r\n        return <h1> {error} </h1>;\r\n      case 'success':\r\n        return (\r\n          <>\r\n            <h1>Movies</h1>\r\n            {/*@ts-ignore*/}\r\n            {value.map((movie) => (\r\n              <div\r\n                key={movie.id_movie}\r\n                onClick={() => postSelectedHandler(movie.id_movie)}\r\n              >\r\n                <p>{movie.movie_title}</p>\r\n                <img\r\n                  width=\"200px\"\r\n                  height=\"300px\"\r\n                  src={movie.movie_img}\r\n                  alt=\"movie-poster\"\r\n                />\r\n              </div>\r\n            ))}\r\n\r\n            <Link to=\"/dashboard\">Back to dashboard</Link>\r\n          </>\r\n        );\r\n    }\r\n  };\r\n  return <>{renderSwitch(status)}</>;\r\n};\r\nexport default Movies;\r\n","C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\components\\index.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\components\\navbar\\Navbar.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\components\\navbar\\styles\\Navbar.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\containers\\Navbar.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\globalStyles.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\constants\\colors.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\constants\\routes.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\db1-project\\client\\src\\constants\\breakpoints.ts",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":33,"column":6,"nodeType":"105","endLine":33,"endColumn":8,"suggestions":"106"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"107","severity":1,"message":"111","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"112","line":35,"column":11,"nodeType":"109","messageId":"110","endLine":35,"endColumn":18},{"ruleId":"107","severity":1,"message":"113","line":35,"column":20,"nodeType":"109","messageId":"110","endLine":35,"endColumn":26},{"ruleId":"107","severity":1,"message":"114","line":35,"column":35,"nodeType":"109","messageId":"110","endLine":35,"endColumn":40},{"ruleId":"115","severity":1,"message":"116","line":25,"column":7,"nodeType":"109","messageId":"117","endLine":25,"endColumn":29},{"ruleId":"107","severity":1,"message":"112","line":37,"column":11,"nodeType":"109","messageId":"110","endLine":37,"endColumn":18},{"ruleId":"107","severity":1,"message":"108","line":1,"column":17,"nodeType":"109","messageId":"110","endLine":1,"endColumn":25},{"ruleId":"107","severity":1,"message":"111","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"112","line":41,"column":11,"nodeType":"109","messageId":"110","endLine":41,"endColumn":18},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'execute' and 'immediate'. Either include them or remove the dependency array.","ArrayExpression",["120"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'execute' is assigned a value but never used.","'status' is assigned a value but never used.","'error' is assigned a value but never used.","@typescript-eslint/no-redeclare","'Movie' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [execute, immediate]",{"range":"123","text":"124"},[819,821],"[execute, immediate]"]